from PIL import Image
import io
import base64


# assume 'image_bytes' is a bytes object containing image data
image_bytes = "'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'"
# image = Image.open(io.BytesIO(image_bytes))
# image.save('output_image.png')



try:
    # Assuming image_bytes is base64 encoded string
    decoded_data = base64.b64decode(image_bytes)
    image = Image.open(io.BytesIO(decoded_data))
    image.save('output_image.png')
except Exception as e:
    print(f"Error processing image: {e}")